import * as prettier from 'prettier';
import { Application } from 'egg';
import { EntityMetadata, Connection } from 'typeorm';
import {
  generateEnumMapImports,
  entityToCreateInput,
  entityToCreateManyArgs,
  entityToOrderByEnum,
  entityToUpdateInput,
  entityToUpdateInputArgs,
  entityToWhereArgs,
  entityToWhereInput,
  entityToWhereUniqueInput,
} from './typeORMConverter';

export class SchemaGenerator {
  static generate(app: Application, connections: Connection[], graphqlConfig, importPath: string): string {
    const { generatedFolder } = graphqlConfig;
    let template = `
      // This file has been auto-generated by Warthog.  Do not update directly as it
      // will be re-written.  If you need to change this file, update models or add
      // new TypeGraphQL objects
      import { GraphQLID as ID } from 'graphql'
      import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
      import { registerEnumType } from 'type-graphql';
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      const { GraphQLJSONObject } = require('graphql-type-json');
      import { BaseWhereInput, PaginationArgs } from '${importPath}';
      ${generateEnumMapImports(generatedFolder).join('')}
    `;

    connections.forEach(connection => {
      connection.entityMetadatas.forEach((entity: EntityMetadata) => {
        template += `
          ${entityToOrderByEnum(entity)}
          ${entityToWhereInput(entity)}
          ${entityToWhereUniqueInput(entity)}
          ${entityToCreateInput(entity)}
          ${entityToUpdateInput(entity)}
          ${entityToWhereArgs(entity)}
          ${entityToCreateManyArgs(entity)}
          ${entityToUpdateInputArgs(entity)}
        `;
      });
    });
    return this.format(app.logger, template);
  }

  static format(logger, code: string, options: prettier.Options = {}) {
    try {
      // TODO: grab our prettier options (single quote, etc...)
      return prettier.format(code, {
        ...options,
        parser: 'typescript',
      });
    } catch (e) {
      logger.error(`There is a syntax error in generated code, unformatted code printed, error: ${JSON.stringify(e)}`);
      return code;
    }
  }
}
